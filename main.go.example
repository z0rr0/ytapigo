package main

import (
	"flag"
	"fmt"
	"os"
	"runtime"
	"time"

	"github.com/z0rr0/ytapigo"
)

const (
	// Name is a programm name
	Name = "YtapiGo"
	// CfgFile is a config file
	// if not set, then HOME/.ytapigo.json is used
	CfgFile = ""
)

var (
	// Version is a version from GIT tags
	Version = "0.0.0"
	// Revision is GIT revision number
	Revision = "git:000000"
	// Date is build date
	Date = "2016-01-01_01:01:01UTC"
	// GoVersion is runtime Go language version
	GoVersion = runtime.Version()
)

func main() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("ERROR: %v\n", r)
			os.Exit(1)
		}
	}()
	langs := flag.Bool("langs", false, "show available languages")
	debug := flag.Bool("debug", false, "debug mode")
	version := flag.Bool("version", false, "print version")
	nocache := flag.Bool("nocache", false, "reset cache")
	flag.Parse()
	if *version {
		fmt.Printf("%v: %v %v %v %v\n", Name, Version, Revision, GoVersion, Date)
		flag.PrintDefaults()
		return
	}
	ytg, err := ytapigo.New(CfgFile, *nocache, *debug)
	if err != nil {
		panic(err)
	}
	t := time.Now()
	defer func() {
		ytg.Duration(t)
	}()
	if *langs {
		if langs, err := ytg.GetLangs(); err != nil {
			panic(err)
		} else {
			fmt.Println(langs)
		}
	} else {
		if s, t, err := ytg.GetTranslations(flag.Args()); err != nil {
			panic(err)
		} else {
			fmt.Printf("%v\n%v\n", s, t)
		}
	}
}
