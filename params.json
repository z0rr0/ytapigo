{"name":"Ytapigo","tagline":"ytapigo, api, translate, yandex","body":"YtapiGo\r\n=======\r\n\r\nIt is a program to translate and check spelling using the console, it based on [Yandex Translate API](http://api.yandex.com/translate/). By default UTF-8 encoding is used.\r\n\r\nIt's a clone of the project [Ytapi](http://z0rr0.github.io/ytapi/) but on the [Go programming language](http://golang.org/). This is created as a package/library, but it can be used as a separate program (see main.go.example), the [documentation](http://godoc.org/github.com/z0rr0/ytapigo) contains details about all methods and variables.\r\n\r\nA spell check is supported only for English, Russian and Ukrainian languages.\r\n\r\n### Usage\r\n\r\n[![GoDoc](https://godoc.org/github.com/z0rr0/ytapigo?status.svg)](https://godoc.org/github.com/z0rr0/ytapigo) [![Build Status](https://travis-ci.org/z0rr0/ytapigo.svg?branch=master)](https://travis-ci.org/z0rr0/ytapigo)\r\n\r\nSee example in [main.go.example](https://github.com/z0rr0/ytapigo/main.go.example).\r\n\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/z0rr0/ytapigo\"\r\n    \"os\"\r\n)\r\n\r\nfunc main() {\r\n    var (\r\n        spelling, translation string\r\n        err error\r\n    )\r\n\r\n    // Example #1: en-ru direction (default)\r\n    spelling, translation, err = ytapigo.GetTranslations(\"Hi All!\")\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    // Example #2: en-ru direction\r\n    spelling, translation, err = ytapigo.GetTranslations(\"en-ru\", \"Hi All!\")\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    // Example #3: translation article for a word\r\n    spelling, translation, err = ytapigo.GetTranslations(\"en-ru\", \"car\")\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    // Example #4: read command line parameters\r\n    spelling, translation, err = ytapigo.GetTranslations(os.Args[1:])\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    fmt.Println(spelling)\r\n    fmt.Println(translation)\r\n}\r\n```\r\n\r\nDownload binary file:\r\n\r\n* Linux - [amd64](https://e.t34.me/open/YtapiGo/linux_amd64/main), [386](https://e.t34.me/open/YtapiGo/linux_386/main), [ARM (RaspberryPI)](https://e.t34.me/open/YtapiGo/linux_arm/main)\r\n* FreeBSD - [amd64](https://e.t34.me/open/YtapiGo/freebsd_amd64/main), [386](https://e.t34.me/open/YtapiGo/freebsd_386/main), [ARM (RaspberryPI)](https://e.t34.me/open/YtapiGo/freebsd_arm/main)\r\n* Darwin (MacOS) - [amd64](https://e.t34.me/open/YtapiGo/darwin_amd64/main), [386](https://e.t34.me/open/YtapiGo/darwin_386/main)\r\n* Windows - [amd64](https://e.t34.me/open/YtapiGo/windows_amd64/main.exe), [386](https://e.t34.me/open/YtapiGo/windows_386/main.exe)\r\n\r\nUsage:\r\n\r\n```shell\r\nchmod u+x main\r\n./main en-fr Hello dear fried!\r\n# output: Bonjour chers frit!\r\n```\r\n\r\n### Dependencies\r\n\r\nStandard [Go library](http://golang.org/pkg/).\r\n\r\n### API keys\r\n\r\nUsers should get API KEYs before an using this program, these values have to be written to a file **$HOME/.ytapigo.json** (see the example `ytapigo_example.json`). **APIlangs** is a set of [available translate directions](https://tech.yandex.ru/translate/doc/dg/concepts/langs-docpage/), each one can have a list of possible user's aliases.\r\n\r\n```javascript\r\n{\r\n  \"APItr\": \"some key value\",\r\n  \"APIdict\": \"some key value\",\r\n  \"Aliases\": {                      // User's languages aliases\r\n    \"en-ru\": [\"en\", \"англ\"],\r\n    \"ru-en\": [\"ru\", \"ру\"]\r\n  },\r\n  \"Default\": \"en-ru\"                // default translation direction\r\n}\r\n```\r\n\r\n1. **APItr** - API KEY for [Yandex Translate](http://api.yandex.com/key/form.xml?service=trnsl)\r\n2. **APIdict** - API KEY for [Yandex Dictionary](http://api.yandex.com/key/form.xml?service=dict)\r\n\r\nIt was implemented using the services:\r\n\r\n* [Yandex Dictionary](http://api.yandex.com/dictionary/)\r\n* [Yandex Translate](http://api.yandex.com/translate/)\r\n* [Yandex Speller](http://api.yandex.ru/speller/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}